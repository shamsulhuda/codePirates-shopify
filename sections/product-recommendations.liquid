{% assign limit = section.settings.limit %}
{% liquid
  case limit
    when 1
    assign column = 'col-md-6'
    when 2
    assign column = 'col-md-6'
    when 3
    assign column = 'col-md-4'
    when 4
    assign column = 'col-md-3'
  endcase
%}

<div class="container">
  <div class="product-recommendations" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit={{- limit -}}&intent=related">
    {%- if recommendations.performed? and recommendations.products_count > 0 -%}   
        <h2>{{ section.settings.section_title | default: "Recommended Products" }}</h2>    
      <div class="row">
        {%- for product in recommendations.products -%}
          {% render 'product-card', product:product, column: column %}
        {%- endfor -%}
      </div>
    {%- endif -%}
  </div>
</div>


{% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;
    
    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
  {
    "name": "Product recommendations",
    "settings": [
      {
        "type": "text",
        "id": "section_title",
        "label": "Section title",
        "default": "You May Also Like"
      },
      {
        "type": "range",
        "id": "limit",
        "label": "Product limit",
        "min": 1,
        "max": 4,
        "step": 1,
        "default": 3
      }
    ]
  }
{% endschema %}
